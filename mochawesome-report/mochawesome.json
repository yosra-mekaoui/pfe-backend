{
  "stats": {
    "suites": 33,
    "tests": 50,
    "passes": 50,
    "pending": 0,
    "failures": 0,
    "start": "2024-05-17T10:53:14.202Z",
    "end": "2024-05-17T10:53:14.316Z",
    "duration": 114,
    "testsRegistered": 50,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "edaaf5ef-63ae-47db-bd9b-aaf8f541e081",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "0021c18e-f9bc-430a-bbe5-b44719150eaa",
          "title": "Test Users",
          "fullFile": "C:\\Users\\Deloitte\\Desktop\\PFE_Project\\My_Backend\\test\\app\\controllers\\api\\user.test.js",
          "file": "\\test\\app\\controllers\\api\\user.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return a 200 response on GET /users",
              "fullTitle": "Test Users should return a 200 response on GET /users",
              "timedOut": false,
              "duration": 29,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "response = await supertest\n    .get('/users')\n    .then(response => {\n        return response;\n});\nexpect(response.statusCode).to.be.equal(200);\nexpect(response.body).to.be.an('array');",
              "err": {},
              "uuid": "fa4604ea-23f2-4b38-a8bb-df0bf7b8662e",
              "parentUUID": "0021c18e-f9bc-430a-bbe5-b44719150eaa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create a new user on POST /users",
              "fullTitle": "Test Users should create a new user on POST /users",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const firstName = \"tawa\";\nconst lastName = \"leader\";\nconst email = \"kk.kk@gmail.com\";\n    \n// Envoyer la requête POST pour créer un nouvel utilisateur\nconst response = await supertest\n    .post('/users')\n    .send({\n        firstName,\n        lastName,\n        email\n    });\n    \n// Vérifier le statut de la réponse\nexpect(response.statusCode).to.be.equal(201);\n    \n// Vérifier les détails de l'utilisateur créé\nexpect(response.body.firstName).to.be.equal(firstName);\nexpect(response.body.lastName).to.be.equal(lastName);\nexpect(response.body.email).to.be.equal(email);",
              "err": {},
              "uuid": "db6dfd10-c8b7-4735-9904-95315d8669fe",
              "parentUUID": "0021c18e-f9bc-430a-bbe5-b44719150eaa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update a user on PUT /users/:id",
              "fullTitle": "Test Users should update a user on PUT /users/:id",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const firstName = \"tawa\";\nconst lastName = \"leader\";\nconst email = \"kk.test@gmail.com\";\n// Créer un nouvel utilisateur\nconst newUser = await supertest\n    .post('/users')\n    .send({\n        firstName,\n        lastName,\n        email\n    });\n    \n// Mettre à jour les détails de l'utilisateur\nconst updatedFirstName = \"tawa\";\nconst updatedLastName = \"leader\";\nconst updatedEmail = \"kk.testt@gmail.com\";\n// Envoyer la requête PUT pour mettre à jour l'utilisateur\nconst response = await supertest\n    .put(`/users/${newUser.body._id}`)\n    .send({\n        firstName: updatedFirstName,\n        lastName: updatedLastName,\n        email: updatedEmail\n    });\n    \n// Vérifier le statut de la réponse\nexpect(response.statusCode).to.be.equal(200);\n    \n// Vérifier que les détails de l'utilisateur ont été correctement mis à jour\nexpect(response.body.firstName).to.be.equal(updatedFirstName);\nexpect(response.body.lastName).to.be.equal(updatedLastName);\nexpect(response.body.email).to.be.equal(updatedEmail);",
              "err": {},
              "uuid": "6ed45d60-4c9f-4ab4-bfca-f1533877c4c9",
              "parentUUID": "0021c18e-f9bc-430a-bbe5-b44719150eaa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete a user on DELETE /users/:id",
              "fullTitle": "Test Users should delete a user on DELETE /users/:id",
              "timedOut": false,
              "duration": 15,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Créer un nouvel utilisateur pour le supprimer ensuite\nconst newUser = await supertest\n    .post('/users')\n    .send({\n        firstName: 'John',\n        lastName: 'Doe',\n        email: 'john.doe@example.com'\n    });\n    \n// Envoyer la requête DELETE pour supprimer l'utilisateur\nconst response = await supertest\n    .delete(`/users/${newUser.body._id}`);\n    \n// Vérifier le statut de la réponse\nexpect(response.statusCode).to.be.equal(200);\n    \n// Vérifier que l'utilisateur a été supprimé en essayant de le récupérer\nconst getUserResponse = await supertest.get(`/users/${newUser.body._id}`);\nexpect(getUserResponse.statusCode).to.be.equal(404);",
              "err": {},
              "uuid": "f02ab9cf-6428-46fe-ae37-ffbf482a8422",
              "parentUUID": "0021c18e-f9bc-430a-bbe5-b44719150eaa",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fa4604ea-23f2-4b38-a8bb-df0bf7b8662e",
            "db6dfd10-c8b7-4735-9904-95315d8669fe",
            "6ed45d60-4c9f-4ab4-bfca-f1533877c4c9",
            "f02ab9cf-6428-46fe-ae37-ffbf482a8422"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 62,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f6276f2c-dfb7-4617-92ff-96d744b35169",
          "title": "Annonce Validations",
          "fullFile": "C:\\Users\\Deloitte\\Desktop\\PFE_Project\\My_Backend\\test\\app\\validations\\annonce.test.js",
          "file": "\\test\\app\\validations\\annonce.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "757ab3fd-c43b-4c7b-86b2-85a8fe14090b",
              "title": "createAnnonceValidations",
              "fullFile": "C:\\Users\\Deloitte\\Desktop\\PFE_Project\\My_Backend\\test\\app\\validations\\annonce.test.js",
              "file": "\\test\\app\\validations\\annonce.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should validate a valid annonce object when all fields are provided",
                  "fullTitle": "Annonce Validations createAnnonceValidations should validate a valid annonce object when all fields are provided",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const validAnnonce = {\n    Title: 'Sample Title',\n    Content: 'Sample Content',\n    pic: 'sample.jpg'\n};\nconst result = createAnnonceValidations.validate(validAnnonce);\nassert.isUndefined(result.error);",
                  "err": {},
                  "uuid": "a4bfa48e-557b-4317-b082-e376f4be54cc",
                  "parentUUID": "757ab3fd-c43b-4c7b-86b2-85a8fe14090b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not validate an invalid annonce object when Title is too short, Content is empty, and pic is empty",
                  "fullTitle": "Annonce Validations createAnnonceValidations should not validate an invalid annonce object when Title is too short, Content is empty, and pic is empty",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const invalidAnnonce = {\n    Title: 'Sa', // too short\n    Content: '', // empty string\n    pic: '' // empty string\n};\nconst result = createAnnonceValidations.validate(invalidAnnonce);\nassert.isDefined(result.error);",
                  "err": {},
                  "uuid": "4f2fce91-6407-42a0-b2da-dca308bd5626",
                  "parentUUID": "757ab3fd-c43b-4c7b-86b2-85a8fe14090b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a4bfa48e-557b-4317-b082-e376f4be54cc",
                "4f2fce91-6407-42a0-b2da-dca308bd5626"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "18e7f552-59c6-4714-82b5-72ce7961f7e3",
              "title": "getAnnonceByIdValidations",
              "fullFile": "C:\\Users\\Deloitte\\Desktop\\PFE_Project\\My_Backend\\test\\app\\validations\\annonce.test.js",
              "file": "\\test\\app\\validations\\annonce.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should validate a valid annonce ID when the ID is provided",
                  "fullTitle": "Annonce Validations getAnnonceByIdValidations should validate a valid annonce ID when the ID is provided",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const validId = { id: '12345678' };\nconst result = getAnnonceByIdValidations.validate(validId);\nassert.isUndefined(result.error);",
                  "err": {},
                  "uuid": "3b85f5da-5974-480c-a4fe-07282d210016",
                  "parentUUID": "18e7f552-59c6-4714-82b5-72ce7961f7e3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not validate an invalid annonce ID when ID is empty",
                  "fullTitle": "Annonce Validations getAnnonceByIdValidations should not validate an invalid annonce ID when ID is empty",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const invalidId = { id: '' }; // empty string\nconst result = getAnnonceByIdValidations.validate(invalidId);\nassert.isDefined(result.error);",
                  "err": {},
                  "uuid": "d40df6a1-b32e-4eed-8490-6143b0f634b6",
                  "parentUUID": "18e7f552-59c6-4714-82b5-72ce7961f7e3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3b85f5da-5974-480c-a4fe-07282d210016",
                "d40df6a1-b32e-4eed-8490-6143b0f634b6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "22bb812d-d355-47f3-b14c-264dabf81446",
              "title": "updateAnnonceValidations",
              "fullFile": "C:\\Users\\Deloitte\\Desktop\\PFE_Project\\My_Backend\\test\\app\\validations\\annonce.test.js",
              "file": "\\test\\app\\validations\\annonce.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should validate a valid annonce update when all fields are provided",
                  "fullTitle": "Annonce Validations updateAnnonceValidations should validate a valid annonce update when all fields are provided",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const validUpdate = {\n    id: '12345678',\n    Title: 'Sample Title',\n    Content: 'Sample Content',\n    pic: 'sample.jpg'\n};\nconst result = updateAnnonceValidations.validate(validUpdate);\nassert.isUndefined(result.error);",
                  "err": {},
                  "uuid": "2d83d8f1-3417-4b23-9557-718878c2855f",
                  "parentUUID": "22bb812d-d355-47f3-b14c-264dabf81446",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not validate an invalid annonce update when ID is missing",
                  "fullTitle": "Annonce Validations updateAnnonceValidations should not validate an invalid annonce update when ID is missing",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const invalidUpdate = {\n    id: '', // empty string\n    Title: 'Sample Title',\n    Content: 'Sample Content',\n    pic: 'sample.jpg'\n};\nconst result = updateAnnonceValidations.validate(invalidUpdate);\nassert.isDefined(result.error);",
                  "err": {},
                  "uuid": "b26f5783-a3be-4ede-a91a-5ddf30be3ddc",
                  "parentUUID": "22bb812d-d355-47f3-b14c-264dabf81446",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2d83d8f1-3417-4b23-9557-718878c2855f",
                "b26f5783-a3be-4ede-a91a-5ddf30be3ddc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "5f38666a-3f94-4286-a7d9-fdd24039196b",
          "title": "Conge Validations",
          "fullFile": "C:\\Users\\Deloitte\\Desktop\\PFE_Project\\My_Backend\\test\\app\\validations\\conge.test.js",
          "file": "\\test\\app\\validations\\conge.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ff005735-8974-4c84-8766-6d2ead878fc1",
              "title": "getCongeByIdValidations",
              "fullFile": "C:\\Users\\Deloitte\\Desktop\\PFE_Project\\My_Backend\\test\\app\\validations\\conge.test.js",
              "file": "\\test\\app\\validations\\conge.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should successfully validate a valid congé ID when it is provided",
                  "fullTitle": "Conge Validations getCongeByIdValidations should successfully validate a valid congé ID when it is provided",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const validId = { id: '12345678' };\nconst result = getCongeByIdValidations.validate(validId);\nassert.isUndefined(result.error);",
                  "err": {},
                  "uuid": "1c925731-27bc-45d3-8467-2aab4d4a6509",
                  "parentUUID": "ff005735-8974-4c84-8766-6d2ead878fc1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should fail to validate an invalid congé ID when it is missing or empty",
                  "fullTitle": "Conge Validations getCongeByIdValidations should fail to validate an invalid congé ID when it is missing or empty",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const invalidId = { id: '' }; // Chaîne vide\nconst result = getCongeByIdValidations.validate(invalidId);\nassert.isDefined(result.error);",
                  "err": {},
                  "uuid": "0efdc099-536c-42bb-b0ed-123fb448ead3",
                  "parentUUID": "ff005735-8974-4c84-8766-6d2ead878fc1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1c925731-27bc-45d3-8467-2aab4d4a6509",
                "0efdc099-536c-42bb-b0ed-123fb448ead3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "941a9576-df44-4536-8163-b3cf7826cc33",
          "title": "Document Validations",
          "fullFile": "C:\\Users\\Deloitte\\Desktop\\PFE_Project\\My_Backend\\test\\app\\validations\\doc.test.js",
          "file": "\\test\\app\\validations\\doc.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "e208b57f-dff9-470c-a721-9f3a09dfa58b",
              "title": "createDocValidations",
              "fullFile": "C:\\Users\\Deloitte\\Desktop\\PFE_Project\\My_Backend\\test\\app\\validations\\doc.test.js",
              "file": "\\test\\app\\validations\\doc.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should successfully validate a valid document object when all fields are provided",
                  "fullTitle": "Document Validations createDocValidations should successfully validate a valid document object when all fields are provided",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const validDoc = {\n    Title: 'Sample Title',\n    Path: '/path/to/document',\n    Type: 'pdf'\n};\nconst result = createDocValidations.validate(validDoc);\nassert.isUndefined(result.error);",
                  "err": {},
                  "uuid": "c2c228ac-0329-4305-8023-893841326a1f",
                  "parentUUID": "e208b57f-dff9-470c-a721-9f3a09dfa58b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should fail to validate an invalid document object when one or more fields are missing or invalid",
                  "fullTitle": "Document Validations createDocValidations should fail to validate an invalid document object when one or more fields are missing or invalid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const invalidDoc = {\n    Title: 'Sa', // too short\n    Path: '', // empty string\n    Type: '' // empty string\n};\nconst result = createDocValidations.validate(invalidDoc);\nassert.isDefined(result.error);",
                  "err": {},
                  "uuid": "61187aba-2e4e-4850-b1dc-94381465eb65",
                  "parentUUID": "e208b57f-dff9-470c-a721-9f3a09dfa58b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c2c228ac-0329-4305-8023-893841326a1f",
                "61187aba-2e4e-4850-b1dc-94381465eb65"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4cfe328c-0634-4773-a64c-b56552b812f8",
              "title": "getDocByIdValidations",
              "fullFile": "C:\\Users\\Deloitte\\Desktop\\PFE_Project\\My_Backend\\test\\app\\validations\\doc.test.js",
              "file": "\\test\\app\\validations\\doc.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should successfully validate a valid document ID when it is provided",
                  "fullTitle": "Document Validations getDocByIdValidations should successfully validate a valid document ID when it is provided",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const validId = { id: '12345678' };\nconst result = getDocByIdValidations.validate(validId);\nassert.isUndefined(result.error);",
                  "err": {},
                  "uuid": "05524d7f-ab29-48a7-99f1-6f1b9b22bfc6",
                  "parentUUID": "4cfe328c-0634-4773-a64c-b56552b812f8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should fail to validate an invalid document ID when it is missing or empty",
                  "fullTitle": "Document Validations getDocByIdValidations should fail to validate an invalid document ID when it is missing or empty",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const invalidId = { id: '' }; // empty string\nconst result = getDocByIdValidations.validate(invalidId);\nassert.isDefined(result.error);",
                  "err": {},
                  "uuid": "dd62b00b-0c50-400a-a76a-b841ca10deec",
                  "parentUUID": "4cfe328c-0634-4773-a64c-b56552b812f8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "05524d7f-ab29-48a7-99f1-6f1b9b22bfc6",
                "dd62b00b-0c50-400a-a76a-b841ca10deec"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "812f8770-a979-4b46-a1cf-fe27cd356e04",
              "title": "updateDocValidations",
              "fullFile": "C:\\Users\\Deloitte\\Desktop\\PFE_Project\\My_Backend\\test\\app\\validations\\doc.test.js",
              "file": "\\test\\app\\validations\\doc.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should successfully validate a valid document update object when all fields are provided",
                  "fullTitle": "Document Validations updateDocValidations should successfully validate a valid document update object when all fields are provided",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const validUpdate = {\n    id: '12345678',\n    Title: 'Sample Title',\n    Path: '/path/to/document',\n    Type: 'pdf'\n};\nconst result = updateDocValidations.validate(validUpdate);\nassert.isUndefined(result.error);",
                  "err": {},
                  "uuid": "f2a273ea-5d97-4189-9fcc-3ebf88788c29",
                  "parentUUID": "812f8770-a979-4b46-a1cf-fe27cd356e04",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should fail to validate an invalid document update object when one or more fields are missing or invalid",
                  "fullTitle": "Document Validations updateDocValidations should fail to validate an invalid document update object when one or more fields are missing or invalid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const invalidUpdate = {\n    id: '', // empty string\n    Title: 'Sample Title',\n    Path: '/path/to/document',\n    Type: 'pdf'\n};\nconst result = updateDocValidations.validate(invalidUpdate);\nassert.isDefined(result.error);",
                  "err": {},
                  "uuid": "9cc63900-61e4-42ed-b197-83ce941aae2a",
                  "parentUUID": "812f8770-a979-4b46-a1cf-fe27cd356e04",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f2a273ea-5d97-4189-9fcc-3ebf88788c29",
                "9cc63900-61e4-42ed-b197-83ce941aae2a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "80d19ca2-32fb-4fd7-9c0a-c1672de23375",
          "title": "Project Validations",
          "fullFile": "C:\\Users\\Deloitte\\Desktop\\PFE_Project\\My_Backend\\test\\app\\validations\\project.test.js",
          "file": "\\test\\app\\validations\\project.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "0b86e2ea-fc72-4202-9bac-72656270da45",
              "title": "getProjectByIdValidations",
              "fullFile": "C:\\Users\\Deloitte\\Desktop\\PFE_Project\\My_Backend\\test\\app\\validations\\project.test.js",
              "file": "\\test\\app\\validations\\project.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should validate a valid project ID when it is provided",
                  "fullTitle": "Project Validations getProjectByIdValidations should validate a valid project ID when it is provided",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const validId = { id: '12345678' };\nconst result = getProjectByIdValidations.validate(validId);\nassert.isUndefined(result.error);",
                  "err": {},
                  "uuid": "905ef458-b3b9-45f1-93b2-2321f057c59d",
                  "parentUUID": "0b86e2ea-fc72-4202-9bac-72656270da45",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not validate an invalid project ID when it is missing or empty",
                  "fullTitle": "Project Validations getProjectByIdValidations should not validate an invalid project ID when it is missing or empty",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const invalidId = { id: '' }; // empty string\nconst result = getProjectByIdValidations.validate(invalidId);\nassert.isDefined(result.error);",
                  "err": {},
                  "uuid": "adca6d9d-d84c-49c0-9a2a-23d4bebf4def",
                  "parentUUID": "0b86e2ea-fc72-4202-9bac-72656270da45",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "905ef458-b3b9-45f1-93b2-2321f057c59d",
                "adca6d9d-d84c-49c0-9a2a-23d4bebf4def"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "40d73406-0638-456e-9060-d73dc2e7b3b7",
          "title": "Role Validations",
          "fullFile": "C:\\Users\\Deloitte\\Desktop\\PFE_Project\\My_Backend\\test\\app\\validations\\role.test.js",
          "file": "\\test\\app\\validations\\role.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "c0e8885e-ca49-4d2a-9fc0-e2e3ed5d0f65",
              "title": "createRoleValidations",
              "fullFile": "C:\\Users\\Deloitte\\Desktop\\PFE_Project\\My_Backend\\test\\app\\validations\\role.test.js",
              "file": "\\test\\app\\validations\\role.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should validate a valid role object when the role name is provided correctly",
                  "fullTitle": "Role Validations createRoleValidations should validate a valid role object when the role name is provided correctly",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const validRole = {\n    Role_Name: 'Sample Role'\n};\nconst result = createRoleValidations.validate(validRole);\nassert.isUndefined(result.error);",
                  "err": {},
                  "uuid": "10a4a1c6-3adc-428f-b00e-209bdeccd66a",
                  "parentUUID": "c0e8885e-ca49-4d2a-9fc0-e2e3ed5d0f65",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not validate an invalid role object when the role name is too short",
                  "fullTitle": "Role Validations createRoleValidations should not validate an invalid role object when the role name is too short",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const invalidRole = {\n    Role_Name: 'Ro' // too short\n};\nconst result = createRoleValidations.validate(invalidRole);\nassert.isDefined(result.error);",
                  "err": {},
                  "uuid": "febc2d7e-301b-4f6a-b574-f283050933ba",
                  "parentUUID": "c0e8885e-ca49-4d2a-9fc0-e2e3ed5d0f65",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "10a4a1c6-3adc-428f-b00e-209bdeccd66a",
                "febc2d7e-301b-4f6a-b574-f283050933ba"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f390508f-3cf8-4614-ab4f-ff519f30c12c",
              "title": "getRoleByIdValidations",
              "fullFile": "C:\\Users\\Deloitte\\Desktop\\PFE_Project\\My_Backend\\test\\app\\validations\\role.test.js",
              "file": "\\test\\app\\validations\\role.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should validate a valid role ID when it is provided",
                  "fullTitle": "Role Validations getRoleByIdValidations should validate a valid role ID when it is provided",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const validId = { id: '12345678' };\nconst result = getRoleByIdValidations.validate(validId);\nassert.isUndefined(result.error);",
                  "err": {},
                  "uuid": "188c84f2-0c31-4dcc-baee-7815d0194cb7",
                  "parentUUID": "f390508f-3cf8-4614-ab4f-ff519f30c12c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not validate an invalid role ID when it is missing or empty",
                  "fullTitle": "Role Validations getRoleByIdValidations should not validate an invalid role ID when it is missing or empty",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const invalidId = { id: '' }; // empty string\nconst result = getRoleByIdValidations.validate(invalidId);\nassert.isDefined(result.error);",
                  "err": {},
                  "uuid": "30375355-302a-406e-9fc7-afc09b5c3e71",
                  "parentUUID": "f390508f-3cf8-4614-ab4f-ff519f30c12c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "188c84f2-0c31-4dcc-baee-7815d0194cb7",
                "30375355-302a-406e-9fc7-afc09b5c3e71"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0aaafda4-caaa-4b5a-844b-71a22a1dea50",
              "title": "updateRoleValidations",
              "fullFile": "C:\\Users\\Deloitte\\Desktop\\PFE_Project\\My_Backend\\test\\app\\validations\\role.test.js",
              "file": "\\test\\app\\validations\\role.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should validate a valid role update object when the ID and role name are provided correctly",
                  "fullTitle": "Role Validations updateRoleValidations should validate a valid role update object when the ID and role name are provided correctly",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const validUpdate = {\n    id: '12345678',\n    Role_Name: 'Updated Role'\n};\nconst result = updateRoleValidations.validate(validUpdate);\nassert.isUndefined(result.error);",
                  "err": {},
                  "uuid": "6644d2ea-3f3a-4bf0-8a40-7a4b713b8971",
                  "parentUUID": "0aaafda4-caaa-4b5a-844b-71a22a1dea50",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not validate an invalid role update object when the ID is missing or empty or the role name is too short",
                  "fullTitle": "Role Validations updateRoleValidations should not validate an invalid role update object when the ID is missing or empty or the role name is too short",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const invalidUpdate = {\n    id: '', // empty string\n    Role_Name: 'Ro' // too short\n};\nconst result = updateRoleValidations.validate(invalidUpdate);\nassert.isDefined(result.error);",
                  "err": {},
                  "uuid": "840e36f3-6ee9-4bdf-a18f-4d265c9dccc9",
                  "parentUUID": "0aaafda4-caaa-4b5a-844b-71a22a1dea50",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6644d2ea-3f3a-4bf0-8a40-7a4b713b8971",
                "840e36f3-6ee9-4bdf-a18f-4d265c9dccc9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "66ffe579-7127-4202-8a76-39a87a509a99",
          "title": "Tache Validations",
          "fullFile": "C:\\Users\\Deloitte\\Desktop\\PFE_Project\\My_Backend\\test\\app\\validations\\tache.test.js",
          "file": "\\test\\app\\validations\\tache.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "13f5ec27-7e37-4535-a4e7-506ac9e15ab9",
              "title": "createTacheValidations",
              "fullFile": "C:\\Users\\Deloitte\\Desktop\\PFE_Project\\My_Backend\\test\\app\\validations\\tache.test.js",
              "file": "\\test\\app\\validations\\tache.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should validate a valid tache object when all required fields are provided correctly",
                  "fullTitle": "Tache Validations createTacheValidations should validate a valid tache object when all required fields are provided correctly",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const validTache = {\n    Title: 'Sample Tache',\n    Description: 'Sample Description',\n    Deadline: new Date(new Date().getFullYear() + 1, new Date().getMonth(), new Date().getDate()), // One year from now\n    Status: 'Active',\n    Priority: 1\n};\nconst result = createTacheValidations.validate(validTache);\nassert.isUndefined(result.error);",
                  "err": {},
                  "uuid": "cad213d5-d832-4ec2-950e-e1e5528ad0c1",
                  "parentUUID": "13f5ec27-7e37-4535-a4e7-506ac9e15ab9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not validate an invalid tache object when any required field is missing or invalid",
                  "fullTitle": "Tache Validations createTacheValidations should not validate an invalid tache object when any required field is missing or invalid",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const invalidTache = {\n    Title: 'Sa', // too short\n    Description: '', // empty string\n    Deadline: '2022-01-01', // past date\n    Status: '', // empty string\n    Priority: 'High' // not a number\n};\nconst result = createTacheValidations.validate(invalidTache);\nassert.isDefined(result.error);",
                  "err": {},
                  "uuid": "a38bd0d2-9796-4297-bf53-9527dc56c072",
                  "parentUUID": "13f5ec27-7e37-4535-a4e7-506ac9e15ab9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cad213d5-d832-4ec2-950e-e1e5528ad0c1",
                "a38bd0d2-9796-4297-bf53-9527dc56c072"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8a18ed6f-69cd-453b-a06f-c7149f801155",
              "title": "getTacheByIdValidations",
              "fullFile": "C:\\Users\\Deloitte\\Desktop\\PFE_Project\\My_Backend\\test\\app\\validations\\tache.test.js",
              "file": "\\test\\app\\validations\\tache.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should validate a valid tache ID when it is provided",
                  "fullTitle": "Tache Validations getTacheByIdValidations should validate a valid tache ID when it is provided",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const validId = { id: '12345678' };\nconst result = getTacheByIdValidations.validate(validId);\nassert.isUndefined(result.error);",
                  "err": {},
                  "uuid": "3782509f-9ab7-4620-9fa4-c2f3bee6e1db",
                  "parentUUID": "8a18ed6f-69cd-453b-a06f-c7149f801155",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not validate an invalid tache ID when it is missing or empty",
                  "fullTitle": "Tache Validations getTacheByIdValidations should not validate an invalid tache ID when it is missing or empty",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const invalidId = { id: '' }; // empty string\nconst result = getTacheByIdValidations.validate(invalidId);\nassert.isDefined(result.error);",
                  "err": {},
                  "uuid": "fecd65ba-0a79-46af-ad55-ac27646755e5",
                  "parentUUID": "8a18ed6f-69cd-453b-a06f-c7149f801155",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3782509f-9ab7-4620-9fa4-c2f3bee6e1db",
                "fecd65ba-0a79-46af-ad55-ac27646755e5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e2a17167-5bd5-4b62-9a92-f5b01f4a2dd0",
              "title": "updateTacheValidations",
              "fullFile": "C:\\Users\\Deloitte\\Desktop\\PFE_Project\\My_Backend\\test\\app\\validations\\tache.test.js",
              "file": "\\test\\app\\validations\\tache.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should validate a valid tache update object when the ID and all required fields are provided correctly",
                  "fullTitle": "Tache Validations updateTacheValidations should validate a valid tache update object when the ID and all required fields are provided correctly",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const validUpdate = {\n    id: '12345678',\n    Title: 'Updated Tache',\n    Description: 'Updated Description',\n    Deadline: new Date(new Date().getFullYear() + 1, new Date().getMonth(), new Date().getDate()), // One year from now\n    Status: 'Active',\n    Priority: 1\n};\nconst result = updateTacheValidations.validate(validUpdate);\nassert.isUndefined(result.error);",
                  "err": {},
                  "uuid": "d8bc4048-dcc9-4f76-b2f5-0761fd5f9ee8",
                  "parentUUID": "e2a17167-5bd5-4b62-9a92-f5b01f4a2dd0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not validate an invalid tache update object when any required field is missing or invalid",
                  "fullTitle": "Tache Validations updateTacheValidations should not validate an invalid tache update object when any required field is missing or invalid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const invalidUpdate = {\n    id: '', // empty string\n    Title: 'Up', // too short\n    Description: '', // empty string\n    Deadline: '2022-01-01', // past date\n    Status: '', // empty string\n    Priority: 'High' // not a number\n};\nconst result = updateTacheValidations.validate(invalidUpdate);\nassert.isDefined(result.error);",
                  "err": {},
                  "uuid": "9911cd05-6fdb-44c0-b134-b9a645223677",
                  "parentUUID": "e2a17167-5bd5-4b62-9a92-f5b01f4a2dd0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d8bc4048-dcc9-4f76-b2f5-0761fd5f9ee8",
                "9911cd05-6fdb-44c0-b134-b9a645223677"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "58e654a0-52d2-4111-a2c7-825039813d10",
          "title": "Team Validations",
          "fullFile": "C:\\Users\\Deloitte\\Desktop\\PFE_Project\\My_Backend\\test\\app\\validations\\team.test.js",
          "file": "\\test\\app\\validations\\team.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "7ac92a04-5691-4cbb-b3ee-763bb317c7a3",
              "title": "createTeamValidations",
              "fullFile": "C:\\Users\\Deloitte\\Desktop\\PFE_Project\\My_Backend\\test\\app\\validations\\team.test.js",
              "file": "\\test\\app\\validations\\team.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should validate a valid team object when all required fields are provided correctly",
                  "fullTitle": "Team Validations createTeamValidations should validate a valid team object when all required fields are provided correctly",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const validTeam = {\n  Name: 'Sample Team',\n  Membres: ['member1', 'member2'],\n};\nconst result = createTeamValidations.validate(validTeam);\nassert.isUndefined(result.error);",
                  "err": {},
                  "uuid": "add663ff-9cd8-40d9-a2d8-16185fdf888a",
                  "parentUUID": "7ac92a04-5691-4cbb-b3ee-763bb317c7a3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not validate an invalid team object when any required field is missing or empty",
                  "fullTitle": "Team Validations createTeamValidations should not validate an invalid team object when any required field is missing or empty",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const invalidTeam = {\n  Name: '', // empty string\n  Membres: [], // empty array\n};\nconst result = createTeamValidations.validate(invalidTeam);\nassert.isDefined(result.error);",
                  "err": {},
                  "uuid": "ceb293eb-b431-4b6e-bce9-59541f077b3f",
                  "parentUUID": "7ac92a04-5691-4cbb-b3ee-763bb317c7a3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "add663ff-9cd8-40d9-a2d8-16185fdf888a",
                "ceb293eb-b431-4b6e-bce9-59541f077b3f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e0d61fdb-5883-4a4e-8efb-91d33d9e7c1b",
              "title": "getTeamByIdValidations",
              "fullFile": "C:\\Users\\Deloitte\\Desktop\\PFE_Project\\My_Backend\\test\\app\\validations\\team.test.js",
              "file": "\\test\\app\\validations\\team.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should validate a valid team ID when it is provided",
                  "fullTitle": "Team Validations getTeamByIdValidations should validate a valid team ID when it is provided",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const validId = { id: '12345678' };\nconst result = getTeamByIdValidations.validate(validId);\nassert.isUndefined(result.error);",
                  "err": {},
                  "uuid": "a946a588-4b0e-414a-9bc0-ec065fc3d580",
                  "parentUUID": "e0d61fdb-5883-4a4e-8efb-91d33d9e7c1b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not validate an invalid team ID when it is missing or empty",
                  "fullTitle": "Team Validations getTeamByIdValidations should not validate an invalid team ID when it is missing or empty",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const invalidId = { id: '' }; // empty string\nconst result = getTeamByIdValidations.validate(invalidId);\nassert.isDefined(result.error);",
                  "err": {},
                  "uuid": "2208beb3-24eb-4f23-9394-667ba77ad410",
                  "parentUUID": "e0d61fdb-5883-4a4e-8efb-91d33d9e7c1b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a946a588-4b0e-414a-9bc0-ec065fc3d580",
                "2208beb3-24eb-4f23-9394-667ba77ad410"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4f2b0b32-9aed-4d76-bbed-bec038041b71",
              "title": "updateTeamValidations",
              "fullFile": "C:\\Users\\Deloitte\\Desktop\\PFE_Project\\My_Backend\\test\\app\\validations\\team.test.js",
              "file": "\\test\\app\\validations\\team.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should validate a valid team update object when the ID and all required fields are provided correctly",
                  "fullTitle": "Team Validations updateTeamValidations should validate a valid team update object when the ID and all required fields are provided correctly",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const validUpdate = {\n  id: '12345678',\n  Name: 'Updated Team',\n  Membres: ['updatedMember1', 'updatedMember2'],\n};\nconst result = updateTeamValidations.validate(validUpdate);\nassert.isUndefined(result.error);",
                  "err": {},
                  "uuid": "f6bccba6-3c3a-4bad-9e5e-3d508dfefeba",
                  "parentUUID": "4f2b0b32-9aed-4d76-bbed-bec038041b71",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not validate an invalid team update object when any required field is missing or empty",
                  "fullTitle": "Team Validations updateTeamValidations should not validate an invalid team update object when any required field is missing or empty",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const invalidUpdate = {\n  id: '', // empty string\n  Name: '', // empty string\n  Membres: [], // empty array\n};\nconst result = updateTeamValidations.validate(invalidUpdate);\nassert.isDefined(result.error);",
                  "err": {},
                  "uuid": "edc20ffd-9f28-4f6d-8e1b-8e990a672fe6",
                  "parentUUID": "4f2b0b32-9aed-4d76-bbed-bec038041b71",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f6bccba6-3c3a-4bad-9e5e-3d508dfefeba",
                "edc20ffd-9f28-4f6d-8e1b-8e990a672fe6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e982e657-4e03-490e-b57b-4b803cc7f1f7",
          "title": "Teletravail Validations",
          "fullFile": "C:\\Users\\Deloitte\\Desktop\\PFE_Project\\My_Backend\\test\\app\\validations\\teletravail.test.js",
          "file": "\\test\\app\\validations\\teletravail.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "bbe27193-89c0-4772-8a60-18b49f7614f9",
              "title": "createTeletravailValidations",
              "fullFile": "C:\\Users\\Deloitte\\Desktop\\PFE_Project\\My_Backend\\test\\app\\validations\\teletravail.test.js",
              "file": "\\test\\app\\validations\\teletravail.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should validate a valid teletravail object when all required fields are provided correctly",
                  "fullTitle": "Teletravail Validations createTeletravailValidations should validate a valid teletravail object when all required fields are provided correctly",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const validTeletravail = {\n  StartDate: new Date(),\n  EndDate: new Date(Date.now() + 86400000), // Adding one day to the current date\n  Status: 'active',\n};\nconst result = createTeletravailValidations.validate(validTeletravail);\nassert.isUndefined(result.error);",
                  "err": {},
                  "uuid": "8fca83d6-a1bc-4081-908a-6964fd5b1628",
                  "parentUUID": "bbe27193-89c0-4772-8a60-18b49f7614f9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not validate an invalid teletravail object when any required field is missing or empty",
                  "fullTitle": "Teletravail Validations createTeletravailValidations should not validate an invalid teletravail object when any required field is missing or empty",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const invalidTeletravail = {\n  StartDate: '2024-05-10', // Should be a Date object\n  EndDate: '2024-05-09', // End date should be after start date\n  Status: '', // Status should not be empty\n};\nconst result = createTeletravailValidations.validate(invalidTeletravail);\nassert.isDefined(result.error);",
                  "err": {},
                  "uuid": "1e8ab648-f1d3-46f3-9e54-77bcbf59f9e9",
                  "parentUUID": "bbe27193-89c0-4772-8a60-18b49f7614f9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8fca83d6-a1bc-4081-908a-6964fd5b1628",
                "1e8ab648-f1d3-46f3-9e54-77bcbf59f9e9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "542b139a-eb9b-4d00-b1b6-6786f40e8637",
              "title": "getTeletravailByIdValidations",
              "fullFile": "C:\\Users\\Deloitte\\Desktop\\PFE_Project\\My_Backend\\test\\app\\validations\\teletravail.test.js",
              "file": "\\test\\app\\validations\\teletravail.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should validate a valid teletravail ID when it is provided",
                  "fullTitle": "Teletravail Validations getTeletravailByIdValidations should validate a valid teletravail ID when it is provided",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const validId = { id: '12345678' };\nconst result = getTeletravailByIdValidations.validate(validId);\nassert.isUndefined(result.error);",
                  "err": {},
                  "uuid": "95ea2f38-6706-46f5-9914-9015c1bf4274",
                  "parentUUID": "542b139a-eb9b-4d00-b1b6-6786f40e8637",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not validate an invalid teletravail ID when it is missing or empty",
                  "fullTitle": "Teletravail Validations getTeletravailByIdValidations should not validate an invalid teletravail ID when it is missing or empty",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const invalidId = { id: '' }; // empty string\nconst result = getTeletravailByIdValidations.validate(invalidId);\nassert.isDefined(result.error);",
                  "err": {},
                  "uuid": "1a60e6ea-482f-40c5-86e1-45562e082da3",
                  "parentUUID": "542b139a-eb9b-4d00-b1b6-6786f40e8637",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "95ea2f38-6706-46f5-9914-9015c1bf4274",
                "1a60e6ea-482f-40c5-86e1-45562e082da3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a5279662-9393-4bb2-83de-b85c26cd3b61",
              "title": "updateTeletravailValidations",
              "fullFile": "C:\\Users\\Deloitte\\Desktop\\PFE_Project\\My_Backend\\test\\app\\validations\\teletravail.test.js",
              "file": "\\test\\app\\validations\\teletravail.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should validate a valid teletravail update object when the ID and all required fields are provided correctly",
                  "fullTitle": "Teletravail Validations updateTeletravailValidations should validate a valid teletravail update object when the ID and all required fields are provided correctly",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const validUpdate = {\n  id: '12345678',\n  StartDate: new Date(),\n  EndDate: new Date(Date.now() + 86400000), // Adding one day to the current date\n  Status: 'inactive',\n};\nconst result = updateTeletravailValidations.validate(validUpdate);\nassert.isUndefined(result.error);",
                  "err": {},
                  "uuid": "971963ce-c2d8-4099-b64a-1d91828632e3",
                  "parentUUID": "a5279662-9393-4bb2-83de-b85c26cd3b61",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not validate an invalid teletravail update object when any required field is missing or empty",
                  "fullTitle": "Teletravail Validations updateTeletravailValidations should not validate an invalid teletravail update object when any required field is missing or empty",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const invalidUpdate = {\n  id: '', // empty string\n  StartDate: '2024-05-10', // Should be a Date object\n  EndDate: '2024-05-09', // End date should be after start date\n  Status: '', // Status should not be empty\n};\nconst result = updateTeletravailValidations.validate(invalidUpdate);\nassert.isDefined(result.error);",
                  "err": {},
                  "uuid": "6188495e-149e-4b00-a2ee-8d3b2b19ef54",
                  "parentUUID": "a5279662-9393-4bb2-83de-b85c26cd3b61",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "971963ce-c2d8-4099-b64a-1d91828632e3",
                "6188495e-149e-4b00-a2ee-8d3b2b19ef54"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "4c97088c-5e9e-467f-b1f7-a43d4a8ae0c7",
          "title": "User Validations",
          "fullFile": "C:\\Users\\Deloitte\\Desktop\\PFE_Project\\My_Backend\\test\\app\\validations\\user.test.js",
          "file": "\\test\\app\\validations\\user.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "f88b0ea5-7dab-4565-9169-e8773550f867",
              "title": "createUserValidations",
              "fullFile": "C:\\Users\\Deloitte\\Desktop\\PFE_Project\\My_Backend\\test\\app\\validations\\user.test.js",
              "file": "\\test\\app\\validations\\user.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should validate a valid user object when all required fields are provided correctly",
                  "fullTitle": "User Validations createUserValidations should validate a valid user object when all required fields are provided correctly",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const validUser = {\n  firstName: 'John',\n  lastName: 'Doe',\n  email: 'john@example.com',\n};\nconst result = createUserValidations.validate(validUser);\nassert.isUndefined(result.error);",
                  "err": {},
                  "uuid": "f008ff7e-bc20-4018-870b-ca05c2e875f1",
                  "parentUUID": "f88b0ea5-7dab-4565-9169-e8773550f867",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not validate an invalid user object when any required field is missing or invalid",
                  "fullTitle": "User Validations createUserValidations should not validate an invalid user object when any required field is missing or invalid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const invalidUser = {\n  firstName: 'Jo', // too short\n  lastName: 'Doe',\n  email: 'invalid-email', // invalid email format\n};\nconst result = createUserValidations.validate(invalidUser);\nassert.isDefined(result.error);",
                  "err": {},
                  "uuid": "45a5ac3b-06ee-4799-8567-d1507cfa3a48",
                  "parentUUID": "f88b0ea5-7dab-4565-9169-e8773550f867",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f008ff7e-bc20-4018-870b-ca05c2e875f1",
                "45a5ac3b-06ee-4799-8567-d1507cfa3a48"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2ec3e7cc-20b1-43ff-a766-49f1e30af2b0",
              "title": "getUserByIdValidations",
              "fullFile": "C:\\Users\\Deloitte\\Desktop\\PFE_Project\\My_Backend\\test\\app\\validations\\user.test.js",
              "file": "\\test\\app\\validations\\user.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should validate a valid user ID when it is provided",
                  "fullTitle": "User Validations getUserByIdValidations should validate a valid user ID when it is provided",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const validId = { id: '12345678' };\nconst result = getUserByIdValidations.validate(validId);\nassert.isUndefined(result.error);",
                  "err": {},
                  "uuid": "88e6cec9-e9b2-42f5-87f8-583b3eb55ac7",
                  "parentUUID": "2ec3e7cc-20b1-43ff-a766-49f1e30af2b0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not validate an invalid user ID when it is missing or empty",
                  "fullTitle": "User Validations getUserByIdValidations should not validate an invalid user ID when it is missing or empty",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const invalidId = { id: '' }; // empty string\nconst result = getUserByIdValidations.validate(invalidId);\nassert.isDefined(result.error);",
                  "err": {},
                  "uuid": "ff856d9a-63c9-4a36-9c37-a00a31f06951",
                  "parentUUID": "2ec3e7cc-20b1-43ff-a766-49f1e30af2b0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "88e6cec9-e9b2-42f5-87f8-583b3eb55ac7",
                "ff856d9a-63c9-4a36-9c37-a00a31f06951"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "be3c88fd-30df-41b6-8222-f6020578d690",
              "title": "updateUserValidations",
              "fullFile": "C:\\Users\\Deloitte\\Desktop\\PFE_Project\\My_Backend\\test\\app\\validations\\user.test.js",
              "file": "\\test\\app\\validations\\user.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should validate a valid user update object when the ID and all required fields are provided correctly",
                  "fullTitle": "User Validations updateUserValidations should validate a valid user update object when the ID and all required fields are provided correctly",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const validUpdate = {\n  id: '12345678',\n  firstName: 'John',\n  lastName: 'Doe',\n  email: 'john@example.com',\n};\nconst result = updateUserValidations.validate(validUpdate);\nassert.isUndefined(result.error);",
                  "err": {},
                  "uuid": "5086517d-4f12-4a30-af77-f5d97ed7ebe9",
                  "parentUUID": "be3c88fd-30df-41b6-8222-f6020578d690",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not validate an invalid user update object when any required field is missing or invalid",
                  "fullTitle": "User Validations updateUserValidations should not validate an invalid user update object when any required field is missing or invalid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const invalidUpdate = {\n  id: '', // empty string\n  firstName: 'John',\n  lastName: 'Doe',\n  email: 'john@example.com',\n};\nconst result = updateUserValidations.validate(invalidUpdate);\nassert.isDefined(result.error);",
                  "err": {},
                  "uuid": "f7025749-5d31-4540-b137-8f7a21b5f117",
                  "parentUUID": "be3c88fd-30df-41b6-8222-f6020578d690",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5086517d-4f12-4a30-af77-f5d97ed7ebe9",
                "f7025749-5d31-4540-b137-8f7a21b5f117"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}